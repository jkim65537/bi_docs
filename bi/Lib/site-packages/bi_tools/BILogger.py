import os
import os.path
import logging
import sys
import getpass
from datetime import datetime

class log_mode():
    critical = {"CRITICAL":50} #50
    error = {"ERROR":40} #40
    warning = {"WARNING":30} #30
    info = {"INFO":20} #20
    debug = {"DEBUG":10} #10
    notset = {"NOTSET":0} #0

#TODO 1: make logger work both on vm and lm. 2: add feature for save to s3
class Logger(object):
    """
    BILogger Class
    """
    def __init__(self, mode, exc_date=None):
        self.mode = getattr(log_mode, "critical").keys()[0]
        self.mode_score = getattr(log_mode, "critical").values()[0]
        self.username = getpass.getuser()
        self.run_file = os.path.basename(sys.argv[0]).replace(".py", "")
        if exc_date is  None:
            self.exc_date = str(datetime.today().date())
        else:
            self.exc_date = exc_date

        #set up the log files
        self._create_log_file()
        self._config()
        self._set_default_logs()
        self.execution_date()

    def _create_log_file(self):
        #if log directory does not exist, then create so we can write some logs
        log_directory = "/home/{}/logs".format(self.username)
        if not os.path.exists(log_directory):
            os.makedirs(log_directory)

        log_path = "{}/{}_{}.log".format(log_directory,
            self.run_file,
            self.exc_date)
        if os.path.isfile(log_path):
            os.remove(log_path)
        self.logger = logging.getLogger(self.run_file)
        self.handler = logging.FileHandler(log_path)

    def print_log(self, msg):
        import sys
        if self.mode_score <= 20:
            print msg
        else:
            pass

    def _config(self):
        """
        config function
        """
        self.logger.setLevel(os.environ.get("LOGLEVEL", self.mode.upper()))
        self.handler.setLevel(os.environ.get("LOGLEVEL", self.mode.upper()))
        format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        formatter = logging.Formatter(format)
        self.handler.setFormatter(formatter)
        self.logger.addHandler(self.handler)

    def _set_default_logs(self):
        """
        set default logs
        """
        self.exists_msg = "data exists"
        self.not_exist_msg = "data does not exist"
        self.writing_msg = "writing table..."
        self.querying_msg = "querying..."
        self.success_msg = "succeeded"
        self.failure_msg = "failed"
        self.execution_date_msg = "Execution Date:{}".format(self.exc_date)
        self.ran_by_msg = "ran by {}".format(self.username)
        self.ran_when_msg = "ran on {}".format(datetime.today())

    def custom_log(self, message):
        """
        log custom message
        """
        self.print_log(message)
        self.logger.info(message)

    def execution_date(self):
        self.print_log(self.execution_date_msg)
        self.logger.info(self.execution_date_msg)

    def exist(self):
        self.print_log(self.exists_msg)
        self.logger.info(self.exists_msg)

    def not_exist(self):
        self.print_log(self.not_exist_msg)
        self.logger.warning(self.not_exist_msg)

    def writing(self):
        self.print_log(self.writing_msg)
        self.logger.info(self.writing_msg)

    def querying(self):
        self.print_log(self.querying_msg)
        self.logger.info(self.querying_msg)

    def success(self):
        self.print_log(self.success_msg)
        self.logger.info(self.success_msg)

    def fail(self):
        self.print_log(self.failure_msg)
        self.logger.info(self.failure_msg)

    def ran_info(self):
        self.print_log("{} & {}".format(self.ran_by_msg, self.ran_when_msg))
        self.logger.info("{} & {}".format(self.ran_by_msg, self.ran_when_msg))
